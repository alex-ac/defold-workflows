name: Package and publish artifact.
inputs:
  input:
    description: Path to the input directory.
    required: true
  output_dir:
    description: Path to the output directory.
    required: true
  output_name:
    description: Basename of the output file.
    required: true
  project_name:
    description: Name of the defold project.
    required: true
  bundle_type:
    description: |
      Type of bundle to make. One of 'tgz', 'zip', 'dmg', 'ipa' or 'apk'.
    required: true
outputs:
  artifact_name:
    description: Name of the uploaded artifact.
    value: ${{ steps.package.outputs.artifact_name }}
  artifact_path:
    description: Name of the uploaded artifact.
    value: ${{ steps.package.outputs.artifact_path }}

runs:
  using: composite
  steps:
  - id: package
    shell: python
    env:
      INPUTS: ${{ toJSON(inputs) }}
      PYTHONPATH: ${{ github.action_path }}/..
    run: |
      import pathlib
      import shutil

      import toolkit

      @toolkit.inputs
      class Inputs:
          input: pathlib.Path
          output_dir: pathlib.Path
          output_name: str
          project_name: str
          bundle_type: str

      inputs = Inputs.load()

      def package_dmg(inputs) -> pathlib.Path:
          (inputs.input / 'Applications').symlink_to('/Applications')
          output = (inputs.output / inputs.output_name).with_suffix('.dmg')

          toolkit.check_call([
              'hdiutil', 'create',
              '-format', 'UDZO',
              '-srcfolder', inputs.input,
              '-volname', inputs.project_name,
              output,
          ])

      def package_archive(format):
          def package(inputs):
              return pathlib.Path(shutil.make_archive(
                  inputs.output_dir / inputs.output_name,
                  format, root_dir=inputs.input, base_dir='.'))

          return package

      def package_apk(inputs):
          apk = inputs.input / inputs.project_name / f'{inputs.project_name}.apk'
          output = (inputs.output / inputs.output_name).with_suffix('.apk')
          output.hardlink_to(apk)
          return output

      def package_ipa(inputs):
          ipa = inputs.input / f'{inputs.project_name }.ipa'
          output = (inputs.output / inputs.output_name).with_suffix('.ipa')
          output.hardlink_to(inputs.ipa)
          return output

      package = {
          'tgz': package_archive('gztar'),
          'zip': package_archive('zip'),
          'dmg': package_dmg,
          'apk': package_apk,
          'ipa': package_ipa,
      }[inputs.bundle_type]

      output = package(inputs)
      toolkit.set_env('artifact_name', inputs.output.name)
      toolkit.set_output('artifact_name', inputs.output.name)
      toolkit.set_env('artifact_path', output)
      toolkit.set_output('artifact_path', output)

  - uses: actions/upload-artifact@v3
    with:
      name: ${{ env.artifact_name }}
      path: ${{ env.artifact_path }}
